/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Group: { // root type
    id?: string | null; // String
    name?: string | null; // String
  }
  LoginResponse: { // root type
    jwt?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Membership: { // root type
    groupId?: string | null; // String
    roleId?: string | null; // String
    userId?: string | null; // String
  }
  Mutation: {};
  Query: {};
  User: { // root type
    bio?: string | null; // String
    email?: string | null; // String
    name?: string | null; // String
    password?: string | null; // String
    role?: string | null; // String
    uuid?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Group: { // field return type
    id: string | null; // String
    name: string | null; // String
  }
  LoginResponse: { // field return type
    jwt: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Membership: { // field return type
    group: NexusGenRootTypes['Group'] | null; // Group
    groupId: string | null; // String
    roleId: string | null; // String
    userId: string | null; // String
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['LoginResponse']; // LoginResponse!
  }
  Query: { // field return type
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  User: { // field return type
    bio: string | null; // String
    email: string | null; // String
    memberships: Array<NexusGenRootTypes['Membership'] | null> | null; // [Membership]
    name: string | null; // String
    password: string | null; // String
    role: string | null; // String
    uuid: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Group: { // field return type name
    id: 'String'
    name: 'String'
  }
  LoginResponse: { // field return type name
    jwt: 'String'
    user: 'User'
  }
  Membership: { // field return type name
    group: 'Group'
    groupId: 'String'
    roleId: 'String'
    userId: 'String'
  }
  Mutation: { // field return type name
    login: 'LoginResponse'
  }
  Query: { // field return type name
    users: 'User'
  }
  User: { // field return type name
    bio: 'String'
    email: 'String'
    memberships: 'Membership'
    name: 'String'
    password: 'String'
    role: 'String'
    uuid: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      email: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}