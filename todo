- authorization
    - query user 
        - authorize user (do we want to think about screens? )
            implement: 
                - hasGlobalPermission
                    - read permissions with userdata
                    - memoize user data to not repeat the query
                - hasGroupPermission
            - user has global permission "View All Users" (authorize admin)
            - user has global permission "View My User" 
                - the requested(args) user == authenticated user
            - user has group permission "View Users Of My Groups" for a group the queried user belongs to (authorize teacher)
                - need to (pre) load the queried user with groups
            - do we really want permission based access? Maybe role based access will be easier. 
- adjust prettier and format on save (prettier)
- create logout mutation
    - only allow authorized users
        - login (only allowed for unauthenticated users)
        - logout (allowed for most users)
    - think about only running authorized queries in prod
        - security
        - avoid recursive queries to compromise the server
- frontend
- postgress db
    - migrate password field types to varchars(since PG native are richer)
    - create enum for roles field
    - postgress tool to see the db
- take a look on prisma's data guide
- deploy
    - how to access running instances, query the DB, interact with the app? 
    - add restrictions on migrations, seeds, etc...