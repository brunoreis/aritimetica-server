- make current user data immutable/frozen
   - test assignment instead of comparisson in getMembershipsInGroup and see if there is an error
- implement user.receivedLessons. 'View All Lessons Of A User In The Same Group' permission
    - log as a teacher
    - try to view a user with their received lessons
- create some kind of enum for permissions to avoid type errors
- query lessons (with exercises....)    
    - authorize teacher to view lessons from all users in their group
        implement: 
        - user has group permission "View Lessons Of Users In My Groups" for a group the queried user belongs to (authorize teacher)
- adjust prettier and format on save (prettier)
- create logout mutation
    - persist token in db?
    - only allow authorized users
        - login (only allowed for unauthenticated users)
        - logout (allowed for most users)
    - think about only running authorized queries in prod
        - security
        - avoid recursive queries to compromise the server
- frontend
- postgress db
    - migrate password field types to varchars(since PG native are richer)
    - create enum for roles field
    - postgress tool to see the db
- take a look on prisma's data guide
- deploy
    - how to access running instances, query the DB, interact with the app? 
    - add restrictions on migrations, seeds, etc...