- createUser mutation
    - 
    - write tests
        - user was created correctly (data)?
        - group was created correctly? 
        - memberhsip was created correctly?
    - cleanup db
        - user and membership are ok. We still need to cleanup the group. 
    - validate password  - check if we can login
    - use service code in the seed code

- deleteUser mutation
    - delete memberships and groups where the user is the owner

- review documentation
    - lifecycles
        - write an operation
        - write a test

UsersScreen
    list groups (cards)
        - createGroup
        - deleteGroup
        list users (small "icons" with name below)
        - associate user? 
        - desassociate user?
        - create user?

-LessonsScreen
    list lessons
        title
        assigned by 
        assigned date

- updateUserMembership
    - add/delete user roles in an specific group

- create logout mutation
    - persist token in db?
    - only allow authorized users
        - login (only allowed for unauthenticated users)
        - logout (allowed for most users)

- deploy
    - generated files
    - how to access running instances, query the DB, interact with the app? 
    - add restrictions on migrations, seeds, etc...
    - https://keenethics.com/blog/digital-ocean-server-node-js-postgresql

- add version/commit num to the logs (git commit) 
- add a request_id to the frontent and propagate 

- think about only running authorized queries in prod
    - security
    - avoid recursive queries to compromise the server

- frontend

- deploy
    - how to access running instances, query the DB, interact with the app? 
    - add restrictions on migrations, seeds, etc...

- postgress db
    - migrate password field types to varchars(since PG native are richer)
    - create enum for roles field
    - postgress tool to see the db

- telemetry: prisma / jaeger / ...
    - use LogRocket
    - telemetry: see if we already can bind prisma queries to requests (request_id/user_id): https://github.com/prisma/prisma/issues/7596
    - add a final query count (num of queries during the request) to the logs 

- login - optimize to set the currentAuthUser with the same log in user (low prio)
    - add CurrentUser::setCacheduserData method
        - add auth memberships with fetchAndAddAuthUserMemberships
        - store in the cache, so that further get operations will restore it


